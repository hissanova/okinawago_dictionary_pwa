{"version":3,"file":"static/js/284.4de51984.chunk.js","mappings":"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","sources":["../node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v4.1.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\n/**\n * Little helper for generating a regex that will match a specified\n * CSS selector when that selector is _not_ a part of a `@supports` rule.\n *\n * The pattern will match the provided `selector` (i.e. ':host', ':host-context', etc.)\n * when that selector is not a part of a `@supports` selector rule _or_ if the selector\n * is a part of the rule's declaration.\n *\n * For instance, if we create the regex with the selector ':host-context':\n * - '@supports selector(:host-context())' will return no matches (starts with '@supports')\n * - '@supports selector(:host-context()) { :host-context() { ... }}' will match the second ':host-context' (part of declaration)\n * - ':host-context() { ... }' will match ':host-context' (selector is not a '@supports' rule)\n * - ':host() { ... }' will return no matches (selector doesn't match selector used to create regex)\n *\n * @param selector The CSS selector we want to match for replacement\n * @returns A look-behind regex containing the selector\n */\nconst createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<=\\{.*))(${selector}\\\\b)`, 'gim');\nconst _colonSlottedRe = createSupportsRuleRe('::slotted');\nconst _colonHostRe = createSupportsRuleRe(':host');\nconst _colonHostContextRe = createSupportsRuleRe(':host-context');\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\n/**\n * Replaces certain strings within the CSS with placeholders\n * that will later be replaced with class selectors appropriate\n * for the level of encapsulation (shadow or scoped).\n *\n * When performing these replacements, we want to ignore selectors that are a\n * part of an `@supports` rule. Replacing these selectors will result in invalid\n * CSS that gets passed to autoprefixer/postcss once the placeholders are replaced.\n * For example, a rule like:\n *\n * ```css\n * @supports selector(:host()) {\n *   :host {\n *     color: red;\n *   }\n * }\n * ```\n *\n * Should be converted to:\n *\n * ```css\n * @supports selector(:host()) {\n *   -shadowcsshost {\n *     color: red;\n *   }\n * }\n * ```\n *\n * The order the regex replacements happen in matters since we match\n * against a whole selector word so we need to match all of `:host-context`\n * before we try to replace `:host`. Otherwise the pattern for `:host` would match\n * `:host-context` resulting in something like `:-shadowcsshost-context`.\n *\n * @param cssText A CSS string for a component\n * @returns The modified CSS string\n */\nconst insertPolyfillHostInCssText = (cssText) => {\n    // These replacements use a special syntax with the `$1`. When the replacement\n    // occurs, `$1` maps to the content of the string leading up to the selector\n    // to be replaced.\n    //\n    // Otherwise, we will replace all the preceding content in addition to the\n    // selector because of the lookbehind in the regex.\n    //\n    // e.g. `/*!@___0___*/:host {}` => `/*!@___0___*/--shadowcsshost {}`\n    cssText = cssText\n        .replace(_colonHostContextRe, `$1${_polyfillHostContext}`)\n        .replace(_colonHostRe, `$1${_polyfillHost}`)\n        .replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n    return cssText;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","createSupportsRuleRe","selector","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","arguments","length","undefined","content","suffix","contentPrefix","startsWith","blocks","substring","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","_len","m","Array","_key","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector","re","makeScopeMatcher","test","injectScopingSelector","scopingSelector","_","applyStrictSelectorScope","hostSelector","className","_scopeSelectorPart","scopedP","applySimpleSelectorScope","lastIndex","replaceBy","t","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","res","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","restoreSafeSelector","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","convertColonSlotted","slotClass","selectors","_len2","_key2","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","scopeCss","commentsWithHash","match","stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach","_ref"],"sourceRoot":""}